pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
print('hello')

-- Compute pentagram points
pts = {}
local d = 2 / (3 + sqrt(5))
for n=0,4 do
  add(pts, { sin(0.4+n/5) * d, cos(0.4+n/5) * d })
  add(pts, { sin(0.5+n/5), cos(0.5+n/5) })
end

-- Compute circle points
cp = {}
for n=1,20 do
  add(cp, { sin(0.5+n/20), cos(0.5+n/20) })
end

-- Pentagram segments
seg = {
  1, 2, 2, 3, 3, 1,
  3, 4, 4, 5, 5, 3,
  5, 6, 6, 7, 7, 5,
  7, 8, 8, 9, 9, 7,
  9, 10, 10, 1, 1, 9,
}

-- Interesting pieces of the pentagram (0x7fff = full)
pieces = {
--   0x3, // 1+2
     0x7, // 1+2+3
  0x4924, // 3+6+9+12+15
    0x23, // 1+2+6
  0x4003, // 15+1+2
   0x122, // 2+6+9
  0x4801, // + mirror
   0x124, // 3+6+9
  0x3400, // + mirror
   0x1a0, // 6+8+9
  0x4a00, // + mirror
    0x58, // 4+5+7
}

-- gradients
grad = {
  { 0, 0, 0, 1, 1, 1 },
  { 0, 0, 0, 2, 2, 2 },
  { 0, 1, 1, 3, 3, 3 },
  { 0, 2, 2, 4, 4, 4 },
  { 0, 1, 1, 5, 5, 5 },
  { 0, 1, 1, 5, 6, 6 },
  { 0, 5, 5, 6, 7, 7 },
  { 0, 2, 2, 4, 8, 8 },
  { 0, 2, 2, 4, 9, 9 },
  { 0, 4, 4, 9, 10, 10 },
  { 0, 1, 1, 3, 11, 11 },
  { 0, 1, 1, 5, 12, 12 },
  { 0, 1, 1, 5, 13, 13 },
  { 0, 1, 1, 2, 14, 14 },
  { 0, 4, 4, 9, 15, 15 },
}

-- The draw RNG seed
drng = 0

function _init()
  queue = {}
  state = 0
  steer = 0
end

function _update60()
  drng += 0.125
  while #queue < 5 do add(queue, rnd(pieces)) sel = queue[1] end
  steer *= 0x.e
  if btnp(0) then
    sel = (sel >> 3 | sel << 12) & 0x7fff
    steer -= 0.2
  elseif btnp(1) then
    sel = (sel << 3 | sel >> 12) & 0x7fff
    steer += 0.2
  end
  if btnp(4) then
    --state ^^= sel
    state |= sel
    deli(queue, 1)
  end
end

function jline(x1, y1, x2, y2, c)
  xa, ya = .625 * x1 + .375 * x2 + rnd(1) - .5, .625 * y1 + .375 * y2 + rnd(1) - .5
  xb, yb = .375 * x1 + .625 * x2 + rnd(1) - .5, .375 * y1 + .625 * y2 + rnd(1) - .5
  for k=1,5 do
    line()
    line(x1 + rnd(1), y1 + rnd(1), grad[c][k+1])
    line(xa + rnd(1), ya + rnd(1))
    line(xb + rnd(1), yb + rnd(1))
    line(x2 + rnd(1), y2 + rnd(1))
  end
end

function part(n, x, y, sx, sy, angle, center, c)
  if center then
    xmin, xmax = 1, -1
    ymin, ymax = 1, -1
    for b = 0,14 do
      if (n >> b) & 1 == 1 then
        for i = b * 2 + 1, b * 2 + 2 do
          local px, py = pts[seg[i]][1], pts[seg[i]][2]
          xmin, xmax = min(xmin, px), max(xmax, px)
          ymin, ymax = min(ymin, py), max(ymax, py)
        end
      end
    end
    x -= (xmax + xmin) * sx / 2
    y -= (ymax + ymin) * sy / 2
  end
  ca, sa = cos(angle), sin(angle)
  for b = 0,14 do
    if (n >> b) & 1 == 1 then
      local p1, p2 = pts[seg[b * 2 + 1]], pts[seg[b * 2 + 2]]
      local dx1, dy1 = ca * p1[1] - sa * p1[2], sa * p1[1] + ca * p1[2]
      local dx2, dy2 = ca * p2[1] - sa * p2[2], sa * p2[1] + ca * p2[2]
      jline(x + sx * dx1, y + sy * dy1, x + sx * dx2, y + sy * dy2, c)
    end
  end
end

function rot(n)
  return (n << 3 | n >> 12) & 0x7fff
end

function _draw()
  local seed = rnd()
  srand(flr(drng))
  cls(1)
  palt(0, false)
  palt(1, true)
  --for p=1,#pieces do
    --part(pieces[p], 32+(p-1)%3*(30), 32+(p-1)\3*(30), 30, 20, 6+p)
  --end
  -- Draw the main pentagram
  local cx, cy = 80, 44
  local sx, sy = 42, 32
  ovalfill(cx - sx * 1.02, cy - sy * 1.02, cx + sx * 1.06, cy + sy * 1.06, 0)
  for i=1,20 do
    local j = i % 20 + 1
    jline(cx + sx * 1.06 * cp[i][1], cy + sy * 1.06 * cp[i][2],
          cx + sx * 1.06 * cp[j][1], cy + sy * 1.06 * cp[j][2], 8)
  end
  part(state, cx, cy, sx, sy, 0, false, 8)
  part(sel, cx, cy, sx, sy, steer, false, 7)
  -- Draw the queue
  for i=1,#queue do
    local cx, cy = 24 * i - 8, 108
    spr(1, cx - 10, cy - 16, 3, 4)
    part(queue[i], cx, cy, 20, 16, 0, true, 7)
  end
  srand(seed)
end
__gfx__
000000001167777777777777761111110000000000000000000b00000000a4000000000000000000000000000000000000000000000000000000000000000000
000000001755500000000005557111110008080000007c0000bb0000000a40000280280000000000000000000000000000000000000000000000000000000000
00000000650000000000000000561111008004006c00cc00003b0b0004a400002ee8eee000000000000000000000000000000000000000000000000000000000
0000000075000000000000000057111100848080cc000000b01bb3004a9900008e88e82000000000000000000000000000000000000000000000000000000000
00000000750000000000000000571111804988800007c0003bbb300009aaaa90e888882000000000000000000000000000000000000000000000000000000000
0000000070000000000000000007111108aa9800007ccc00013b10b000009a400e88820000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111088aa80000ccc500001bbb000049a40000e8200000000000000000000000000000000000000000000000000000000000
0000000070000000000000000007111100488000001d5000000b3100009a40000002000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000000000000000071111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000750000000000000000571111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000750000000000000000571111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000650000000000000000561111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000175550000000000555711111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000116777777777777776111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
