[vert.glsl]

#version 120

uniform float u_time;

attribute vec2 in_Position;

varying vec2 pass_pos;

vec2 screen = vec2(320.0, 240.0);

void main(void)
{
    pass_pos.xy = in_Position * screen / 2.0;

    gl_Position = vec4(in_Position, 0.0, 1.0);
}

[frag.glsl]

#version 120

#if defined GL_ES
precision highp float;
#endif

uniform float u_time;
uniform vec2 u_center;

varying vec2 pass_pos;

vec2 screen = vec2(320.0, 240.0);

float rand(vec2 co)
{
    return fract(sin(dot(co.xy, vec2(.129898, .78233))) * 43758.5453);
}

void main(void)
{
    float part_per_rad = 500.0 / 6.28318530718;

    vec2 pos = pass_pos - u_center;
    float real_angle = floor(part_per_rad * atan(pos.y, pos.x)) / part_per_rad;

    float red = 0.0, green = 0.0, alpha = 0.0;

    for (int i = -16; i <= 16; ++i)
    {
        float angle = real_angle + float(i) / part_per_rad;

        float speed = mix(30.0, 120.0, rand(vec2(angle, 0.0)));
        float travel = speed * u_time;
        vec2 real_pos = travel * vec2(cos(angle), sin(angle));

        float dist = max(abs(pos.x - real_pos.x), abs(pos.y - real_pos.y));
        if (dist <= 2.0)
        {
            alpha = 1.0 / (1.0 + u_time * (2.0 + rand(vec2(angle, 1.0))));
            red = max(red, mix(0.8, 1.0, rand(vec2(angle, 2.0))));
            green = max(green, mix(0.4, red, rand(vec2(angle, 3.0))));
        }

        if (dist <= 1.0)
        {
            red *= 2.0;
            green *= 2.0;
        }
    }

    red *= alpha;
    green *= alpha;
    alpha = alpha > 0.5 ? 1.0 : 0.0;

    gl_FragColor = vec4(red, green, 0.0, alpha);
}

